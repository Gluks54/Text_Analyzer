package Analyzer;import java.util.HashMap;import java.util.Map;import java.util.stream.Collectors;public class CharFrequencyAnalyzer implements Analyzer<Map<Character,Double>> {    @Override    public Map<Character, Double> analyze(String text) {        String tempText = text.toLowerCase();        long numberOfLetters = tempText                .chars()                .filter(x -> Character.isLetter(x)).count();        double doubleNumberOfLetter = Double.valueOf(numberOfLetters);        Map<Character, Double> numberOfFrequencyLetter = new HashMap<>();        tempText                .chars()                .filter(x -> Character.isLetter(x)).peek(x -> {            if (!numberOfFrequencyLetter.containsKey((char) x)) {                numberOfFrequencyLetter.put((char) x, 1/doubleNumberOfLetter);            }else {                numberOfFrequencyLetter.put((char) x, (((numberOfFrequencyLetter.get((char) x) + 1 / doubleNumberOfLetter))));            } })                .count();        return numberOfFrequencyLetter;    }    public static void main(String[] args) {        String tempText = "q w e r t y u i  q w";        long numberOfLetters = tempText.chars().filter(x -> Character.isLetter(x)).count();        double doubleNumberOfLetter = Double.valueOf(numberOfLetters);       // System.out.println(doubleNumberOfLetter);        Map<Character, Double> numberOfFrequencyLetter = new HashMap<>();        tempText.chars().filter(x -> Character.isLetter(x)).peek(x -> {            if (!numberOfFrequencyLetter.containsKey((char) x)) {                numberOfFrequencyLetter.put((char) x, 1/doubleNumberOfLetter);            }else {                numberOfFrequencyLetter.put((char) x, (((numberOfFrequencyLetter.get((char) x) + 1 / doubleNumberOfLetter))));            }        }).count();        System.out.println(numberOfFrequencyLetter);    }}//Map<Character,Double> //  //  public Map<Character, Double> analyze(String text) {//        Map<Character,Long> map = text.chars()//                .mapToObj(x->(char) x)//                .collect(Collectors.groupingBy(x -> x, Collectors.counting()));//        long allCharCount = map//                .values()//                .stream()//                .mapToLong(x -> x)//                .sum();////        return map//                .keySet()//                .stream()//                .collect(Collectors.toMap(x->x,x -> Math.round((map.get(x) * 1.0 / allCharCount)*10000d)/10000d));//    }