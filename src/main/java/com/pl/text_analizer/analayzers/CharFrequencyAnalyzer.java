package Analyzer;import java.util.HashMap;import java.util.Map;public class CharFrequencyAnalyzer implements Analyzer<Map<Character, Double>> {    @Override    public Map<Character, Double> analyze(String text) {        String tempText = text.toLowerCase();        long numberOfLetters = tempText                .chars()                .filter(x -> Character.isLetter(x)).count();        double doubleNumberOfLetter = Double.valueOf(numberOfLetters);        Map<Character, Double> numberOfFrequencyLetter = new HashMap<>();        tempText                .chars()                .filter(x -> Character.isLetter(x)).peek(x -> {            if (!numberOfFrequencyLetter.containsKey((char) x)) {                numberOfFrequencyLetter.put((char) x, 1 / doubleNumberOfLetter);            } else {                numberOfFrequencyLetter.put((char) x, (((numberOfFrequencyLetter.get((char) x) + 1 / doubleNumberOfLetter))));            }        })                .count();        return numberOfFrequencyLetter;    }    public static void main(String[] args) {        String tempText = "q w e r t y u i  q q w";        long numberOfLetters = tempText                .chars()                .filter(x -> Character.isLetter(x))                .count();        double doubleNumberOfLetter = Double.valueOf(numberOfLetters);        Map<Character, Double> numberOfFrequencyLetter = new HashMap<>();        tempText                .chars()                .filter(x -> Character.isLetter(x))                .peek(x -> {            if (!numberOfFrequencyLetter.containsKey((char) x)) {                numberOfFrequencyLetter.put((char) x, 1 / doubleNumberOfLetter);            } else {                numberOfFrequencyLetter.put((char) x, (((numberOfFrequencyLetter.get((char) x) + 1 / doubleNumberOfLetter))));            }        })                .count();        System.out.println(numberOfFrequencyLetter);    }}